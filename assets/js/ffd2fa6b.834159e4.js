"use strict";(self.webpackChunkpush_website=self.webpackChunkpush_website||[]).push([[73020],{833080:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>o,contentTitle:()=>s,default:()=>d,frontMatter:()=>a,metadata:()=>c,toc:()=>l});var t=r(617624),i=r(904552);r(161268),r(787768);const a={id:"price-tracker-with-showrunners-example",title:"Price Tracker Channel",hide_title:!0,slug:"./price-tracker-with-showrunners-example",displayed_sidebar:"pushNotificationSidebar",sidebar_position:8,image:"/assets/docs/previews/price_tracker_with_showrunners_example--price_tracker_channel.png"},s="Price Tracker in Showrunners",c={id:"notifications/showrunners-scaffold/Examples/price-tracker-with-showrunners-example",title:"Price Tracker Channel",description:"This example is intended to get you understand channel Settings with a real-world application. For the example we are going to look at a scenario where users can choose a their preferred tokens, a time interval and a price percentage change and showrunners framework will notify them as per their request. Checkout Showrunners Docs, Showrunners Framework, Channel Settings Docs and Channel Settings Demo for better understanding!",source:"@site/docs/notifications/03-showrunners-scaffold/03-Examples/09-Showrunner-Example-Price-Tracker.mdx",sourceDirName:"notifications/03-showrunners-scaffold/03-Examples",slug:"/notifications/showrunners-scaffold/Examples/price-tracker-with-showrunners-example",permalink:"/docs/notifications/showrunners-scaffold/Examples/price-tracker-with-showrunners-example",draft:!1,unlisted:!1,editUrl:"https://github.com/ethereum-push-notification-service/push-website/blob/main/docs/notifications/03-showrunners-scaffold/03-Examples/09-Showrunner-Example-Price-Tracker.mdx",tags:[],version:"current",sidebarPosition:8,frontMatter:{id:"price-tracker-with-showrunners-example",title:"Price Tracker Channel",hide_title:!0,slug:"./price-tracker-with-showrunners-example",displayed_sidebar:"pushNotificationSidebar",sidebar_position:8,image:"/assets/docs/previews/price_tracker_with_showrunners_example--price_tracker_channel.png"},sidebar:"pushNotificationSidebar",previous:{title:"Notification Settings in Eth Tracker",permalink:"/docs/notifications/showrunners-scaffold/Examples/eth-tracker-with-showrunners-example"},next:{title:"Aave Channel with Channel Settings",permalink:"/docs/notifications/showrunners-scaffold/Examples/aave-with-showrunners-example"}},o={},l=[{value:"What we gonna build?",id:"what-we-gonna-build",level:2},{value:"Creating Price Tracker in Showrunners",id:"creating-price-tracker-in-showrunners",level:2},{value:"Step 1: Setup the Showrunners in your local machine",id:"step-1-setup-the-showrunners-in-your-local-machine",level:3},{value:"Step 2: Install Dependencies &amp; start up",id:"step-2-install-dependencies--start-up",level:3},{value:"Step 3: Import the Push SDK",id:"step-3-import-the-push-sdk",level:3},{value:"Step 4: Create a <code>priceTrackerKeys.json</code> file in the channel folder",id:"step-4-create-a-pricetrackerkeysjson-file-in-the-channel-folder",level:3},{value:"Step 5: Create a <code>priceTrackerSettings.json</code> file in the channel folder",id:"step-5-create-a-pricetrackersettingsjson-file-in-the-channel-folder",level:3},{value:"Step 6: Create a <code>priceTrackerChannel.ts</code> file in the channel folder",id:"step-6-create-a-pricetrackerchannelts-file-in-the-channel-folder",level:3},{value:"Step 7: Getting started with the channel logic",id:"step-7-getting-started-with-the-channel-logic",level:3},{value:"Step 8: Create a <code>priceTrackerModel.ts</code> file in the folder.",id:"step-8-create-a-pricetrackermodelts-file-in-the-folder",level:3},{value:"Step 9: Create a <code>priceTrackerJobs.ts</code> file in the folder.",id:"step-9-create-a-pricetrackerjobsts-file-in-the-folder",level:3},{value:"Wrapping it UP \ud83d\ude80",id:"wrapping-it-up-rocket",level:3}];function h(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.M)(),...e.components},{Head:r}=n;return r||function(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Head",!0),(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h1,{id:"price-tracker-in-showrunners",children:"Price Tracker in Showrunners"}),"\n",(0,t.jsxs)(n.p,{children:["This example is intended to get you understand channel Settings with a real-world application. For the example we are going to look at a scenario where users can choose a their preferred tokens, a time interval and a price percentage change and showrunners framework will notify them as per their request. Checkout ",(0,t.jsx)(n.a,{href:"https://push.org/docs/notifications/showrunners-scaffold/get-started/",title:"Push Showrunners Docs",children:"Showrunners Docs"}),", ",(0,t.jsx)(n.a,{href:"https://github.com/ethereum-push-notification-service/push-showrunners-framework/tree/main",title:"Push Showrunners Github",children:"Showrunners Framework"}),", ",(0,t.jsx)(n.a,{href:"https://push.org/docs/notifications/build/create-channel-settings/",title:"Push Channel Settings Docs",children:"Channel Settings Docs"})," and ",(0,t.jsx)(n.a,{href:"https://github.com/ethereum-push-notification-service/push-showrunners-framework/tree/main/src/sample_showrunners/bank",title:"Channel Settings Example Github",children:"Channel Settings Demo"})," for better understanding!"]}),"\n",(0,t.jsx)(r,{children:(0,t.jsx)("title",{children:"Price Tracker with Showrunners tutorial | Example | Showrunners Scaffold |\n    Push Notifications | Push Documentation"})}),"\n","\n","\n",(0,t.jsx)(n.h2,{id:"what-we-gonna-build",children:"What we gonna build?"}),"\n",(0,t.jsx)(n.p,{children:"Imagine you are a crypto trader or a general crypto enthusiast. You want to be notified every once in a while about the price movements and activities in the market. But you either lose track of time or forget about it. To solve this exact problem, we will be looking into a Price Tracker and Channel Settings implementation where you as a user can specify conditions on which you would like to get notified."}),"\n",(0,t.jsx)(n.h2,{id:"creating-price-tracker-in-showrunners",children:"Creating Price Tracker in Showrunners"}),"\n",(0,t.jsx)(n.h3,{id:"step-1-setup-the-showrunners-in-your-local-machine",children:"Step 1: Setup the Showrunners in your local machine"}),"\n",(0,t.jsxs)(n.p,{children:["For detailed, step-by-step guide visit the Showrunners ",(0,t.jsx)(n.a,{href:"https://push.org/docs/notifications/showrunners-scaffold/get-started/",title:"Push Showrunners Docs",children:"docs"}),". First we need to create a folder in ",(0,t.jsx)(n.code,{children:"src/showrunners/<your_channel_name>"})]}),"\n",(0,t.jsx)(n.h3,{id:"step-2-install-dependencies--start-up",children:"Step 2: Install Dependencies & start up"}),"\n",(0,t.jsx)(n.p,{children:"Navigate to the SDK directory and install required dependencies."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"cd push-showrunners-framework\nyarn install\ndocker-compose up\nyarn run dev\n"})}),"\n",(0,t.jsx)(n.h3,{id:"step-3-import-the-push-sdk",children:"Step 3: Import the Push SDK"}),"\n",(0,t.jsxs)(n.p,{children:["After you have created a channel folder. Refer to Showrunners ",(0,t.jsx)(n.a,{href:"https://push.org/docs/notifications/showrunners-scaffold/get-started/",title:"Push Showrunners Docs",children:"docs"}),". Move to the [name]Channel.ts file and import the dependencies."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-jsx",children:'import { PushAPI } from "@pushprotocol/restapi";\n'})}),"\n",(0,t.jsxs)(n.h3,{id:"step-4-create-a-pricetrackerkeysjson-file-in-the-channel-folder",children:["Step 4: Create a ",(0,t.jsx)(n.code,{children:"priceTrackerKeys.json"})," file in the channel folder"]}),"\n",(0,t.jsx)(n.p,{children:"Use the boilerplate for the keys file.\n."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-jsx",children:'{\n  "PRIVATE_KEY_NEW_STANDARD": {\n    "PK": "0x{PRIVATE_KEY_HERE}",\n    "CHAIN_ID": "eip155:11155111"\n  },\n  "PRIVATE_KEY_OLD_STANDARD": "0x{PRIVATE_KEY_HERE}"\n}\n'})}),"\n",(0,t.jsxs)(n.h3,{id:"step-5-create-a-pricetrackersettingsjson-file-in-the-channel-folder",children:["Step 5: Create a ",(0,t.jsx)(n.code,{children:"priceTrackerSettings.json"})," file in the channel folder"]}),"\n",(0,t.jsx)(n.p,{children:"Use the below code for the settings file."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-jsx",children:'{\n  "ETH_TRACKER_CACHE_KEY": "ETH_TRACKER_CACHE_KEY",\n  "PAGINATION_PARAMS": {\n    "limit": 1000,\n    "currentPage": 1,\n    "totalPages": 1\n  },\n  "DEFAULT_BALANCE_OBJECT": { "balance": 0 },\n    "cmcEndpoint": "https://pro-api.coinmarketcap.com/",\n    "providerUrl":"https://ethereum-sepolia.publicnode.com",\n    "route":"v2/cryptocurrency/quotes/latest",\n    "cmcKey":"CMC_AP_KEY_HERE",\n    "id":"1,1027,...,3890,9111", // IDs as per CMC API\n    "tokenNames":["BTC","ETH",...,"MATIC","PUSH"] // Token names as per CMC API\n}\n'})}),"\n",(0,t.jsxs)(n.h3,{id:"step-6-create-a-pricetrackerchannelts-file-in-the-channel-folder",children:["Step 6: Create a ",(0,t.jsx)(n.code,{children:"priceTrackerChannel.ts"})," file in the channel folder"]}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.code,{children:"preiceTrackerChannel.ts"})," will be the file which will contain all the logic for the fetching the data and constructing the payload."]}),"\n",(0,t.jsx)(n.p,{children:"There is some boilerplate code involved in creating a channel. The channel.ts file will contain the following boilerplate:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"import { Inject, Service } from 'typedi';\nimport { Logger } from 'winston';\nimport config, { defaultSdkSettings } from '../../config';\nimport { EPNSChannel } from '../../helpers/epnschannel';\n\nconst NETWORK_TO_MONITOR = config.web3MainnetNetwork;\n\n@Service()\nexport default class PricetrackerChannel extends EPNSChannel {\n  constructor(@Inject('logger') public logger: Logger, @Inject('cached') public cached) {\n    super(logger, {\n      sdkSettings: {\n        epnsCoreSettings: defaultSdkSettings.epnsCoreSettings,\n        epnsCommunicatorSettings: defaultSdkSettings.epnsCommunicatorSettings,\n        networkSettings: defaultSdkSettings.networkSettings,\n      },\n      networkToMonitor: NETWORK_TO_MONITOR,\n      dirname: __dirname,\n      name: 'Price Tracker',\n      url: 'https://epns.io',\n      useOffChain: true,\n    });\n  }\n}\n"})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"What's going on here?"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"W"}),"e are creating a new class ",(0,t.jsx)(n.code,{children:"PricetrackerChannel"})," which extends the Push Channel class."]}),"\n",(0,t.jsxs)(n.li,{children:["In the ",(0,t.jsx)(n.code,{children:"super() the"})," constructor we pass in certain arguments required for the channel like the ",(0,t.jsx)(n.code,{children:"networkToMonitor"})," , name, and URL for the channel."]}),"\n",(0,t.jsxs)(n.li,{children:["The ",(0,t.jsx)(n.code,{children:"useOffChain the"})," parameter tells the showrunner to use the off-chain notification instead of an on-chain one."]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"step-7-getting-started-with-the-channel-logic",children:"Step 7: Getting started with the channel logic"}),"\n",(0,t.jsx)(n.p,{children:"Our objective is to create a channel to send notifications about price movements depending upon users' settings (Time interval and Percentage change here).\nSo, to achieve this we will follow the following logic:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Fetch current prices of tokens using the CoinMarketCap API"}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"// API URL components and settings\nconst cmcroute = settings.route;\nconst cmcEndpoint = settings.cmcEndpoint;\nconst pollURL = `${cmcEndpoint}${cmcroute}?id=${\n  settings.id\n}&aux=cmc_rank&CMC_PRO_API_KEY=${settings.cmcKey || config.cmcAPIKey}`;\n// Fetching data from the CMC API\nlet { data } = await axios.get(pollURL);\n"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Initialize ",(0,t.jsx)(n.code,{children:"userAlice"})," for the channel using your private key and signer."]}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"// Initalize provider, signer and userAlice for Channel interaction\nconst provider = new ethers.providers.JsonRpcProvider(settings.providerUrl);\nconst signer = new ethers.Wallet(keys.PRIVATE_KEY_NEW_STANDARD.PK, provider);\nconst userAlice = await PushAPI.initialize(signer, {\n  env: CONSTANTS.ENV.STAGING,\n});\n"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Fetch the current subscribers of the channel using ",(0,t.jsx)(n.code,{children:"subscribers()"})," in the Push SDK"]}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"// Looping for subscribers' data in the channel\nwhile (true) {\n  const userData: any = await userAlice.channel.subscribers({\n    page: i,\n    limit: 30,\n    setting: true,\n  });\n  if (userData.itemcount != 0) {\n    i++;\n  } else {\n    i = 1;\n    // UPDATE CYCLES VALUE\n    // HERE\n    await priceTrackerGlobalModel.findOneAndUpdate({ _id: 'global' }, { $inc: { cycles: 3 } }, { upsert: true });\n\n    break;\n  }\n\n  // Next block of code goes here\n}\n"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Loop across each subscriber to fetch their ",(0,t.jsx)(n.code,{children:"userSettings"})]}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"await Promise.all(\n  userData.subscribers.map(async (subscriberObj: { settings: string; subscriber: any }) => {\n  // Converting String to JS object\n  const userSettings = JSON.parse(subscriberObj.settings);\n  // For merging different token detals in payload\n  const notifData = [];\n  // Only perform computation if user settings exist\n\n  if (userSettings !== null) {\n    /*\n    {\n      Looping through userSettings here\n    }\n    */\n\n    // Triggering notification foe each user asynchronously\n    // Build a payload using the array\n    const title = 'Token Price Movements';\n    const message = 'Hey\ud83d\udc4b! Here is your token movements. Check it out!!';\n    const payloadTitle = 'Token Price Movement';\n    const payloadMsg = notifData.join('');\n\n    const payload = {\n      type: 3, // Type of Notification\n      notifTitle: title, // Title of Notification\n      notifMsg: message, // Message of Notification\n      title: payloadTitle, // Internal Title\n      msg: payloadMsg, // Internal Message\n      recipient: subscriberObj.subscriber, // Recipient\n    };\n\n    // Send a notification only is body exists\n    if (payload.msg !== '') {\n      this.sendNotification({\n        recipient: payload.recipient, // new\n        title: payload.notifTitle,\n        message: payload.notifMsg,\n        payloadTitle: payload.title,\n        payloadMsg: payloadMsg,\n        notificationType: 3,\n        simulate: simulate,\n        image: null,\n      });\n    }\n  }\n})\n"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Loop through every ",(0,t.jsx)(n.code,{children:"userSetting"})," (Tokens) user selected."]}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"await Promise.all(\n  userSettings.map(async (mapObj, index) => {\n    // If subscriber is subscribed to the setting\n    if (mapObj.user == true) {\n      /*Conditions and calculations go here*/\n    }\n  }),\n);\n"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Calculate ",(0,t.jsx)(n.code,{children:"changePercentage"})," using ",(0,t.jsx)(n.code,{children:"prevPrice"})," stored in database and update it."]}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"// Get current price of the token\nconst currentToken = tokenInfo.find((obj) => obj.symbol === mapObj.description);\nconst currentPrice = currentToken.price;\n\n// Get previous token price\nconst previousPriceData = (await priceTrackerTokenModel.findOne({\n  _id: mapObj.description,\n}))\n  ? await priceTrackerTokenModel.findOne({ _id: mapObj.description })\n  : 0;\n\n// Update the new price\nawait priceTrackerTokenModel.findOneAndUpdate(\n  { _id: mapObj.description },\n  { tokenPrevPrice: currentPrice },\n  { upsert: true },\n);\n\n// Calculate Change\nconst changePercentage = (\n  (Math.abs(Number(currentPrice) - previousPriceData.tokenPrevPrice) /\n    previousPriceData.tokenPrevPrice) *\n  100\n).toFixed(2);\n\n/* Conditions go here */\n"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Craft the 4 major conditions - i) User opted for both time interval and percentage change, ii) Only percentage change, iii) Only Time interval and iv) Receive general notifications"}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:'// The 4 conditions here\n// index - 9 ---\x3e Time Interval\n// index - 10 ---\x3e Price Change\nif (userSettings[9]?.enabled == true && userSettings[10]?.enabled == true) {\n  this.logInfo(\n    `Price Alert & Time Interval Slider case: ${subscriberObj.subscriber}`,\n  );\n\n  // Fetch user values for settings\n  let userValueTime = userSettings[9].user;\n  let userValuePrice = userSettings[10].user;\n\n  // Fetch user last cycle values\n  const userDBValue =\n    (await priceTrackerModel.findOne({ _id: subscriberObj.subscriber })) ||\n    (await priceTrackerModel.create({\n      _id: subscriberObj.subscriber,\n      lastCycle: priceTrackerGlobalData.cycles,\n    }));\n\n  // Condition to trigger notification\n  if (\n    Number(changePercentage) >= userValuePrice &&\n    userDBValue.lastCycle + userValueTime == CYCLES\n  ) {\n    // UPDATE the users mapped value in DB\n    await priceTrackerModel.findOneAndUpdate(\n      { _id: subscriberObj.subscriber },\n      { lastCycle: CYCLES },\n      { upsert: true },\n    );\n\n    // Build the payload of the notification\n    const payloadMsg = `Percentage Change (${mapObj.description}): [s:$${changePercentage}]\\n `;\n    notifData.push(payloadMsg);\n  }\n} else if (userSettings[10]?.enabled == true) {\n  this.logInfo(`Price Alert Slider only case: ${subscriberObj.subscriber}`);\n\n  // Fetch user values for settings\n  let userValue = userSettings[10].user;\n\n  // Condition to trigger notification\n  if (Number(changePercentage) >= userValue) {\n    // Build the payload of the notification\n    const payloadMsg = `Percentage Change (${mapObj.description}): [s:$${changePercentage}]\\n `;\n    notifData.push(payloadMsg);\n  }\n} else if (userSettings[9]?.enabled == true) {\n  this.logInfo(`Time Interval Slider only case: ${subscriberObj.subscriber}`);\n\n  // Fetch user values for settings\n  let userValue = userSettings[9].user;\n\n  const userDBValue =\n    (await priceTrackerModel.findOne({ _id: subscriberObj.subscriber })) ||\n    (await priceTrackerModel.create({\n      _id: subscriberObj.subscriber,\n      lastCycle: priceTrackerGlobalData.cycles,\n    }));\n\n  // Condition to trigger notification\n  if (userDBValue.lastCycle + userValue == CYCLES) {\n    // UPDATE the users mapped value in DB\n    await priceTrackerModel.findOneAndUpdate(\n      { _id: subscriberObj.subscriber },\n      { lastCycle: CYCLES },\n      { upsert: true },\n    );\n\n    // Build the payload of the notification\n    const payloadMsg = `${mapObj.description} at [d:$${currentPrice}]\\n `;\n    notifData.push(payloadMsg);\n  }\n} else {\n  this.logInfo("Regular notifications go from here");\n  // Build the payload of the notification\n  const payloadMsg = `${mapObj.description} at [d:$${currentPrice}]\\n `;\n  notifData.push(payloadMsg);\n}\n'})}),"\n",(0,t.jsx)(n.p,{children:"\ud83e\udd2fThose were a lots of code out there. Let's understand what is actually happening there and what coditions trigger the notifications in different cases."}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Case 1: Both percent change and time interval is enabled"})," - When a user opts in to both these settings, what the user want is to receive a notification for their selected tokens when there is a particular change in price and it occured within the time interval.\nSo, the basic logic here is:"]}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"// Condition to trigger notification\nif (\n  Number(changePercentage) >= userValuePrice &&\n  userDBValue.lastCycle + userValueTime == CYCLES\n) {\n}\n"})}),"\n",(0,t.jsxs)(n.p,{children:["We just fetched the prices from the CMC API and using the previous price stored in database, we can calculate the ",(0,t.jsx)(n.code,{children:"changePercentage"})," value.\nFor the ",(0,t.jsx)(n.code,{children:"CYCLES"})," variable, everytime our showrunners framework is executed it is incremented by 3 as the lowest ",(0,t.jsx)(n.code,{children:"ticker"})," value in the slider is 3. You can change it as per your channel and logic. This helps us to calculate when a new user will receive a notification based on on ehich cycle did he opted in."]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Case 2: Only percent change is enabled"})," - Here, a user want to receive notification when there is a particular change in price. So, the basic logic here is:"]}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"// Condition to trigger notification\nif (Number(changePercentage) >= userValue) {\n}\n"})}),"\n",(0,t.jsxs)(n.p,{children:["The calculation for the ",(0,t.jsx)(n.code,{children:"changePercentage"})," is same like ",(0,t.jsx)(n.code,{children:"Case 1"}),"."]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Case 3: Only time interval is enabled"})," - Here, a user want to receive notification as per their chosen interval. So, the basic logic here is:"]}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"// Condition to trigger notification\nif (userDBValue.lastCycle + userValue == CYCLES) {\n}\n"})}),"\n",(0,t.jsxs)(n.p,{children:["The calculation and significance of the ",(0,t.jsx)(n.code,{children:"CYCLES"})," variable is explained in ",(0,t.jsx)(n.code,{children:"Case 1"}),"."]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Case 4: Regular Notifications"})," - Here, a user want to receive notification containing the price of their chosen token at regular intervals. So, we simple resolve this in a ",(0,t.jsx)(n.code,{children:"else"})," condition."]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"This wraps up the channel logic. Now, let's move onto buidling the cron-jobs file and model file."}),"\n",(0,t.jsxs)(n.h3,{id:"step-8-create-a-pricetrackermodelts-file-in-the-folder",children:["Step 8: Create a ",(0,t.jsx)(n.code,{children:"priceTrackerModel.ts"})," file in the folder."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"import { model, Schema } from 'mongoose';\n\nexport interface PriceTrackerData {\n  _id?: string;\n  lastCycle?: number;\n}\n\nconst priceTrackerSchema = new Schema<PriceTrackerData>({\n  _id: {\n    type: String,\n  },\n  lastCycle: {\n    type: Number,\n  },\n});\n\nexport const priceTrackerModel = model<PriceTrackerData>('priceTrackerUserDB', priceTrackerSchema);\n\nexport interface PriceTrackerGlobal {\n  _id?: string;\n  cycles?: number;\n}\n\nconst priceTrackerGlobalSchema = new Schema<PriceTrackerGlobal>({\n  _id: {\n    type: String,\n  },\n  cycles: {\n    type: Number,\n  },\n});\n\nexport const priceTrackerGlobalModel = model<PriceTrackerGlobal>('priceTrackerGlobalDB', priceTrackerGlobalSchema);\n\nexport interface PriceTrackerToken {\n  _id?: String;\n  symbol?: String;\n  tokenPrevPrice?: Number;\n}\n\nconst PriceTrackerTokenSchema = new Schema<PriceTrackerToken>({\n  _id: String,\n  symbol: String,\n  tokenPrevPrice: Number,\n});\n\nexport const priceTrackerTokenModel = model<PriceTrackerToken>('priceTokenTracker', PriceTrackerTokenSchema);\n"})}),"\n",(0,t.jsxs)(n.p,{children:["It is a good practise to write your ",(0,t.jsx)(n.code,{children:"Interface"})," then ",(0,t.jsx)(n.code,{children:"Schema"})," and then create your ",(0,t.jsx)(n.code,{children:"Model"}),". Remember to keep different names of your database for each model."]}),"\n",(0,t.jsxs)(n.h3,{id:"step-9-create-a-pricetrackerjobsts-file-in-the-folder",children:["Step 9: Create a ",(0,t.jsx)(n.code,{children:"priceTrackerJobs.ts"})," file in the folder."]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Import our channel class that we previously created and the necessary packages."}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:'import { Container } from "typedi";\nimport schedule from "node-schedule";\nimport PriceTrackerChannel from "./priceTrackerChannel";\n'})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Export a function containing the scheduling logic."}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:'import logger from "../../loaders/logger";\n\nimport { Container } from "typedi";\nimport schedule from "node-schedule";\nimport PriceTrackerChannel from "./priceTrackerChannel";\n\nexport default () => {\n  // wallet tracker jobs\n  const startTime = new Date(new Date().setHours(0, 0, 0, 0));\n\n  const threeHourRule = new schedule.RecurrenceRule();\n  threeHourRule.hour = new schedule.Range(0, 23, 3);\n  threeHourRule.minute = 0;\n  threeHourRule.second = 0;\n\n  const channel = Container.get(PriceTrackerChannel);\n  channel.logInfo(\n    `-- \ud83d\udef5 Scheduling Showrunner ${channel.cSettings.name} -  Channel [on 3hr ]`,\n  );\n\n  schedule.scheduleJob(\n    { start: startTime, rule: threeHourRule },\n    async function () {\n      const taskName = `${channel.cSettings.name} priceTracker.loadEvents(null) and triggerUserNotification()`;\n      try {\n        await channel.triggerUserNotification(true);\n        logger.info(\n          `${new Date(Date.now())}] \ud83d\udc23 Cron Task Completed -- ${taskName}`,\n        );\n      } catch (err) {\n        logger.error(\n          `${new Date(Date.now())}] \u274c Cron Task Failed -- ${taskName}`,\n        );\n        logger.error(`${new Date(Date.now())}] Error Object: %o`, err);\n      }\n    },\n  );\n};\n'})}),"\n",(0,t.jsx)(n.p,{children:"You can change the scheduling frequency as per your use-case."}),"\n",(0,t.jsxs)(n.h3,{id:"wrapping-it-up-rocket",children:["Wrapping it UP ","\ud83d\ude80"]}),"\n",(0,t.jsx)(n.p,{children:"Congratulations\ud83c\udf8a...you have just built a amazing channel that let users subscribe and receive notifications of their favorite tokens. Now, they are not gonna miss a single update, isnt't it?"}),"\n",(0,t.jsx)(n.p,{children:"This is a very basic yet real-life use-case of channel settings paired up with the showrunners framework. The ways in which you can customize this to create basically any kind of notification is unlimited."}),"\n",(0,t.jsxs)(n.p,{children:["One can even go ahead and include an image in the notification using the ",(0,t.jsx)(n.code,{children:"image"})," parameter in the ",(0,t.jsx)(n.code,{children:"sendNotification"})," function."]}),"\n",(0,t.jsx)(n.p,{children:"That's all for this time. We'll see you in the next one and until then keep building amazing stuff\ud83d\udc4b"})]})}function d(e={}){const{wrapper:n}={...(0,i.M)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(h,{...e})}):h(e)}},787768:(e,n,r)=>{r.d(n,{c:()=>s});r(811504);var t=r(934064);const i={tabItem:"tabItem_Ymn6"};var a=r(617624);function s(e){let{children:n,hidden:r,className:s}=e;return(0,a.jsx)("div",{role:"tabpanel",className:(0,t.c)(i.tabItem,s),hidden:r,children:n})}},161268:(e,n,r)=>{r.d(n,{c:()=>v});var t=r(811504),i=r(934064),a=r(253943),s=r(655592),c=r(495288),o=r(110632),l=r(227128),h=r(821148);function d(e){var n,r;return null!==(n=null===(r=t.Children.toArray(e).filter((e=>"\n"!==e)).map((e=>{if(!e||(0,t.isValidElement)(e)&&function(e){const{props:n}=e;return!!n&&"object"==typeof n&&"value"in n}(e))return e;throw new Error("Docusaurus error: Bad <Tabs> child <"+("string"==typeof e.type?e.type:e.type.name)+'>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.')})))||void 0===r?void 0:r.filter(Boolean))&&void 0!==n?n:[]}function u(e){const{values:n,children:r}=e;return(0,t.useMemo)((()=>{const e=null!=n?n:function(e){return d(e).map((e=>{let{props:{value:n,label:r,attributes:t,default:i}}=e;return{value:n,label:r,attributes:t,default:i}}))}(r);return function(e){const n=(0,l.w)(e,((e,n)=>e.value===n.value));if(n.length>0)throw new Error('Docusaurus error: Duplicate values "'+n.map((e=>e.value)).join(", ")+'" found in <Tabs>. Every value needs to be unique.')}(e),e}),[n,r])}function p(e){let{value:n,tabValues:r}=e;return r.some((e=>e.value===n))}function g(e){let{queryString:n=!1,groupId:r}=e;const i=(0,s.Uz)(),a=function(e){let{queryString:n=!1,groupId:r}=e;if("string"==typeof n)return n;if(!1===n)return null;if(!0===n&&!r)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return null!=r?r:null}({queryString:n,groupId:r});return[(0,o._M)(a),(0,t.useCallback)((e=>{if(!a)return;const n=new URLSearchParams(i.location.search);n.set(a,e),i.replace({...i.location,search:n.toString()})}),[a,i])]}function f(e){const{defaultValue:n,queryString:r=!1,groupId:i}=e,a=u(e),[s,o]=(0,t.useState)((()=>function(e){var n;let{defaultValue:r,tabValues:t}=e;if(0===t.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(r){if(!p({value:r,tabValues:t}))throw new Error('Docusaurus error: The <Tabs> has a defaultValue "'+r+'" but none of its children has the corresponding value. Available values are: '+t.map((e=>e.value)).join(", ")+". If you intend to show no default tab, use defaultValue={null} instead.");return r}const i=null!==(n=t.find((e=>e.default)))&&void 0!==n?n:t[0];if(!i)throw new Error("Unexpected error: 0 tabValues");return i.value}({defaultValue:n,tabValues:a}))),[l,d]=g({queryString:r,groupId:i}),[f,m]=function(e){let{groupId:n}=e;const r=function(e){return e?"docusaurus.tab."+e:null}(n),[i,a]=(0,h.IN)(r);return[i,(0,t.useCallback)((e=>{r&&a.set(e)}),[r,a])]}({groupId:i}),b=(()=>{const e=null!=l?l:f;return p({value:e,tabValues:a})?e:null})();(0,c.c)((()=>{b&&o(b)}),[b]);return{selectedValue:s,selectValue:(0,t.useCallback)((e=>{if(!p({value:e,tabValues:a}))throw new Error("Can't select invalid tab value="+e);o(e),d(e),m(e)}),[d,m,a]),tabValues:a}}var m=r(893664);const b={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};var x=r(617624);function j(e){let{className:n,block:r,selectedValue:t,selectValue:s,tabValues:c}=e;const o=[],{blockElementScrollPositionUntilNextRender:l}=(0,a.MV)(),h=e=>{const n=e.currentTarget,r=o.indexOf(n),i=c[r].value;i!==t&&(l(n),s(i))},d=e=>{var n;let r=null;switch(e.key){case"Enter":h(e);break;case"ArrowRight":{var t;const n=o.indexOf(e.currentTarget)+1;r=null!==(t=o[n])&&void 0!==t?t:o[0];break}case"ArrowLeft":{var i;const n=o.indexOf(e.currentTarget)-1;r=null!==(i=o[n])&&void 0!==i?i:o[o.length-1];break}}null===(n=r)||void 0===n||n.focus()};return(0,x.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,i.c)("tabs",{"tabs--block":r},n),children:c.map((e=>{let{value:n,label:r,attributes:a}=e;return(0,x.jsx)("li",{role:"tab",tabIndex:t===n?0:-1,"aria-selected":t===n,ref:e=>o.push(e),onKeyDown:d,onClick:h,...a,className:(0,i.c)("tabs__item",b.tabItem,null==a?void 0:a.className,{"tabs__item--active":t===n}),children:null!=r?r:n},n)}))})}function w(e){let{lazy:n,children:r,selectedValue:i}=e;const a=(Array.isArray(r)?r:[r]).filter(Boolean);if(n){const e=a.find((e=>e.props.value===i));return e?(0,t.cloneElement)(e,{className:"margin-top--md"}):null}return(0,x.jsx)("div",{className:"margin-top--md",children:a.map(((e,n)=>(0,t.cloneElement)(e,{key:n,hidden:e.props.value!==i})))})}function k(e){const n=f(e);return(0,x.jsxs)("div",{className:(0,i.c)("tabs-container",b.tabList),children:[(0,x.jsx)(j,{...e,...n}),(0,x.jsx)(w,{...e,...n})]})}function v(e){const n=(0,m.c)();return(0,x.jsx)(k,{...e,children:d(e.children)},String(n))}},904552:(e,n,r)=>{r.d(n,{I:()=>c,M:()=>s});var t=r(811504);const i={},a=t.createContext(i);function s(e){const n=t.useContext(a);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:s(e.components),t.createElement(a.Provider,{value:n},e.children)}}}]);