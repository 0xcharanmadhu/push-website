"use strict";(self.webpackChunkpush_website=self.webpackChunkpush_website||[]).push([[15547],{896846:(e,i,n)=>{n.r(i),n.d(i,{assets:()=>r,contentTitle:()=>l,default:()=>u,frontMatter:()=>s,metadata:()=>o,toc:()=>d});var t=n(785893),a=n(511151);n(374866),n(685162),n(23734);const s={id:"docs-video-develop-initializing-video-api",title:"Initializing Video API",hide_title:!0,slug:"./initializing-video-api",displayed_sidebar:"pushVideoSidebar",sidebar_position:4,image:"/assets/docs/previews/docs_video_develop--initializing_video_api.png"},l="Initialising Video API Overview",o={id:"video/build/docs-video-develop-initializing-video-api",title:"Initializing Video API",description:"Push Video API abstract away connection and encryption methods by exposing methods which lets you make and handle video calls.",source:"@site/docs/video/01-build/04-Develop-Initializing-Video-API.mdx",sourceDirName:"video/01-build",slug:"/video/build/initializing-video-api",permalink:"/docs/video/build/initializing-video-api",draft:!1,unlisted:!1,editUrl:"https://github.com/ethereum-push-notification-service/push-website/blob/main/docs/video/01-build/04-Develop-Initializing-Video-API.mdx",tags:[],version:"current",sidebarPosition:4,frontMatter:{id:"docs-video-develop-initializing-video-api",title:"Initializing Video API",hide_title:!0,slug:"./initializing-video-api",displayed_sidebar:"pushVideoSidebar",sidebar_position:4,image:"/assets/docs/previews/docs_video_develop--initializing_video_api.png"},sidebar:"pushVideoSidebar",previous:{title:"Stream Video",permalink:"/docs/video/build/stream-video"},next:{title:"Request a Video Call",permalink:"/docs/video/build/request-a-video-call"}},r={},d=[{value:"Prerequisites",id:"prerequisites",level:2},{value:"Initializing Video API",id:"initializing-video-api",level:2},{value:"Understanding data variable",id:"understanding-data-variable",level:3},{value:"setData function",id:"setdata-function",level:3},{value:"Stream Object",id:"stream-object",level:3},{value:"Media Stream",id:"media-stream",level:3}];function c(e){const i={a:"a",admonition:"admonition",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,a.a)(),...e.components},{Head:n}=i;return n||function(e,i){throw new Error("Expected "+(i?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Head",!0),(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(i.h1,{id:"initialising-video-api-overview",children:"Initialising Video API Overview"}),"\n",(0,t.jsx)(i.p,{children:"Push Video API abstract away connection and encryption methods by exposing methods which lets you make and handle video calls."}),"\n","\n",(0,t.jsx)(n,{children:(0,t.jsx)("title",{children:"Initializing Video API | Push Video | Push Documentation"})}),"\n","\n","\n",(0,t.jsx)(i.h2,{id:"prerequisites",children:"Prerequisites"}),"\n",(0,t.jsx)(i.p,{children:"Before being able to Initialize Video API,"}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsxs)(i.li,{children:["You need to initialize ",(0,t.jsx)(i.code,{children:"User"}),". If you haven't done that yet, please refer to ",(0,t.jsx)(i.a,{href:"../initialize-user",children:"Initializing User"})," to learn how to do that."]}),"\n",(0,t.jsxs)(i.li,{children:["You need to initialize Push ",(0,t.jsx)(i.code,{children:"Stream"}),". If you haven't done that yet, please refer to ",(0,t.jsx)(i.a,{href:"../stream-video",children:"Initializing Stream API"})," to learn how to do that."]}),"\n"]}),"\n",(0,t.jsx)(i.h2,{id:"initializing-video-api",children:"Initializing Video API"}),"\n",(0,t.jsxs)(i.p,{children:["To start video calling wallet addresses, first, you need to declare ",(0,t.jsx)(i.code,{children:"data"}),", ",(0,t.jsx)(i.code,{children:"setData"})," which are essentially a state/variable to hold video call-related data and a function to modify it respectively and we need to create a local media stream. "]}),"\n",(0,t.jsx)(i.p,{children:"Here below is how to initializing Video API:"}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-typescript",children:"  // Initialising the video API\n  // in react, you can use useState hook to declare data and setData like this: const [data, setData] = useState<VideoCallData>(initVideoCallData);\n  // in vanilla js, you can declare data and setData like this: let data = initVideoCallData; const setData = (fn: (data: VideoCallData) => VideoCallData) => {data = fn(data)}\n\n  // async initialize(onChange: (fn: (data: VideoCallData) => VideoCallData) => void, options: VideoInitializeOptions): Promise<VideoV2>;\n  const aliceVideoCall = await userAlice.video.initialize(setData, {\n    stream: Stream, // pass the stream object created using Stream API, please refer to [Initializing Stream API] to learn how to get this stream object.\n    config: {\n      video: true, // to enable video on start, for frontend use\n      audio: true, // to enable audio on start, for frontend use\n    },\n    media?: MediaStream, // to pass your existing media stream(for backend use)\n  });\n"})}),"\n",(0,t.jsxs)(i.table,{children:[(0,t.jsx)(i.thead,{children:(0,t.jsxs)(i.tr,{children:[(0,t.jsx)(i.th,{children:"Param"}),(0,t.jsx)(i.th,{children:"Type"}),(0,t.jsx)(i.th,{children:"Sub-Type"}),(0,t.jsx)(i.th,{children:"Default"}),(0,t.jsx)(i.th,{children:"Remarks"})]})}),(0,t.jsxs)(i.tbody,{children:[(0,t.jsxs)(i.tr,{children:[(0,t.jsx)(i.td,{children:(0,t.jsx)(i.em,{children:(0,t.jsx)(i.code,{children:"onChange"})})}),(0,t.jsx)(i.td,{children:(0,t.jsx)(i.code,{children:"constant"})}),(0,t.jsx)(i.td,{children:"-"}),(0,t.jsx)(i.td,{children:"-"}),(0,t.jsx)(i.td,{children:"Function to update the video call data, takes a function as an argument which receives the latest state of data as a param and should return the modified/new state of data"})]}),(0,t.jsxs)(i.tr,{children:[(0,t.jsx)(i.td,{children:(0,t.jsx)(i.em,{children:(0,t.jsx)(i.code,{children:"options"})})}),(0,t.jsx)(i.td,{children:(0,t.jsx)(i.code,{children:"VideoInitializeOptions"})}),(0,t.jsx)(i.td,{children:"-"}),(0,t.jsx)(i.td,{children:"-"}),(0,t.jsx)(i.td,{children:"configuration properties for initializing the video."})]}),(0,t.jsxs)(i.tr,{children:[(0,t.jsx)(i.td,{children:"-"}),(0,t.jsx)(i.td,{children:(0,t.jsx)(i.code,{children:"options.stream"})}),(0,t.jsx)(i.td,{children:(0,t.jsx)(i.code,{children:"PushStream"})}),(0,t.jsx)(i.td,{children:"-"}),(0,t.jsx)(i.td,{children:"Option to configure to enable listening to only certain chats or notifications."})]}),(0,t.jsxs)(i.tr,{children:[(0,t.jsx)(i.td,{children:"-"}),(0,t.jsx)(i.td,{children:(0,t.jsx)(i.code,{children:"options.config.video"})}),(0,t.jsx)(i.td,{children:(0,t.jsx)(i.code,{children:"boolean"})}),(0,t.jsx)(i.td,{children:"-"}),(0,t.jsxs)(i.td,{children:["pass ",(0,t.jsx)(i.code,{children:"true"}),"to enable video on start, else pass ",(0,t.jsx)(i.code,{children:"false"}),"."]})]}),(0,t.jsxs)(i.tr,{children:[(0,t.jsx)(i.td,{children:"-"}),(0,t.jsx)(i.td,{children:(0,t.jsx)(i.code,{children:"options.config.audio"})}),(0,t.jsx)(i.td,{children:(0,t.jsx)(i.code,{children:"boolean"})}),(0,t.jsx)(i.td,{children:"-"}),(0,t.jsxs)(i.td,{children:["pass ",(0,t.jsx)(i.code,{children:"true"}),"to enable audio on start, else pass ",(0,t.jsx)(i.code,{children:"false"}),"."]})]}),(0,t.jsxs)(i.tr,{children:[(0,t.jsx)(i.td,{children:"-"}),(0,t.jsx)(i.td,{children:(0,t.jsx)(i.code,{children:"options.media"})}),(0,t.jsx)(i.td,{children:(0,t.jsx)(i.code,{children:"MediaStream"})}),(0,t.jsx)(i.td,{children:"-"}),(0,t.jsxs)(i.td,{children:["Local stream. For backend use. Defaults to ",(0,t.jsx)(i.code,{children:"null"}),"."]})]})]})]}),"\n",(0,t.jsx)(i.p,{children:"Now let's go over each property individually and understand how to set them."}),"\n",(0,t.jsx)(i.h3,{id:"understanding-data-variable",children:"Understanding data variable"}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsxs)(i.li,{children:["The ",(0,t.jsx)(i.code,{children:"data"})," variable is an object that is used to store all of the video call-related data."]}),"\n",(0,t.jsxs)(i.li,{children:["It is of type ",(0,t.jsx)(i.code,{children:"PushAPI.VideoCallData"})," and should be initialized with ",(0,t.jsx)(i.code,{children:"initVideoCallData"}),"."]}),"\n",(0,t.jsx)(i.li,{children:"For React-based projects, this would basically be a React state, and for vanilla JS projects, it will be a simple JS variable."}),"\n"]}),"\n",(0,t.jsxs)(i.p,{children:["The type ",(0,t.jsx)(i.code,{children:"PushAPI.VideoCallData"})," is described below:"]}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-typescript",children:"// IMediaStream is a custom type that represents a media stream object or null\ntype IMediaStream = MediaStream | null;\n\n// VideoCallStatus is an enum that represents different statuses of a video call\n// These values are used to indicate the current status of a video call\nenum VideoCallStatus {\n  // call hasn't been started yet\n  UNINITIALIZED,\n\n  // call has been started by the initiator but not received by the receiver\n  INITIALIZED,\n\n  // call has been received by the receiver but not connected yet\n  RECEIVED,\n\n  // call has been connected, and both users can interact now\n  // MediaStream (includes both audio and video) exchange is now possible\n  CONNECTED,\n\n  // when the call request is denied by the peer (receiver)\n  DISCONNECTED,\n\n  // call has been ended by one of the users\n  ENDED\n\n  // retrying to establish the call from the INITIALIZED state\n  RETRY_INITIALIZED,\n\n  // retrying to establish the call from the RECEIVED state\n  RETRY_RECEIVED,\n}\n\ntype VideoCallData = {\n  meta: {\n    // contains meta info of the video call\n    chatId: string; // unique identifier for every push chat\n    initiator: {\n      address: string; // address of the initiator of the call\n      signal: any; // signal data from the initiator\n    };\n    broadcast?: {\n      // will be used in Push Spaces\n      livepeerInfo: any;\n      hostAddress: string;\n      coHostAddress: string;\n    };\n  };\n  // This property is used to store the info of the local peer/user\n  local: {\n    stream: IMediaStream; // the stream object\n    audio: boolean | null; // whether local audio is on or not\n    video: boolean | null; // whether local video is on or not\n    address: string; // address of the local peer/user\n  };\n  incoming: [\n    // This property is used to store the info of an incoming peer/user\n    {\n      stream: IMediaStream; // the stream object\n      audio: boolean | null; // whether incoming audio is on or not\n      video: boolean | null; // whether incoming video is on or not\n      address: string; // address of the incoming peer/user\n      status: VideoCallStatus; // video call status with a particular incoming peer\n      retryCount: number; // no. of retries required in establishing the call\n    },\n  ];\n};\n"})}),"\n",(0,t.jsxs)(i.p,{children:["The ",(0,t.jsx)(i.code,{children:"initVideoCallData"})," looks like the following:"]}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-typescript",children:'// As mentioned earlier, this should be used to initialize the data variable.\nconst initVideoCallData: PushAPI.VideoCallData = {\n  meta: {\n    chatId: "",\n    initiator: {\n      address: "",\n      signal: null,\n    },\n  },\n  local: {\n    stream: null,\n    audio: null,\n    video: null,\n    address: "",\n  },\n  incoming: [\n    {\n      stream: null,\n      audio: null,\n      video: null,\n      address: "",\n      status: VideoCallStatus.UNINITIALIZED, // call is at the UNINITIALIZED status\n      retryCount: 0,\n    },\n  ],\n};\n'})}),"\n",(0,t.jsxs)(i.p,{children:["Creating and initializing the ",(0,t.jsx)(i.code,{children:"data"})," variable is shown below:"]}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-typescript",children:'// NOTE: You don\'t have to define initVideoCallData in your project.\n// Just import it using the following and use it:\nimport { initVideoCallData } from "@pushprotocol/restapi/src/lib/video";\n\n// 1. For a vanilla JS project\nlet data: PushAPI.VideoCallData = initVideoCallData;\n\n// 2. For a React project\nimport { useState } from "react";\nconst [data, setData] = useState<PushAPI.VideoCallData>(initVideoCallData);\n'})}),"\n",(0,t.jsx)(i.h3,{id:"setdata-function",children:"setData function"}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsxs)(i.li,{children:[(0,t.jsx)(i.code,{children:"setData"})," is a function to update the video call data i.e., the ",(0,t.jsx)(i.code,{children:"data"})," variable."]}),"\n",(0,t.jsxs)(i.li,{children:["It is of type ",(0,t.jsx)(i.code,{children:"(fn: (data: VideoCallData) => VideoCallData) => void"})," and is described below:"]}),"\n"]}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-typescript",children:"/*\n- fn function is supplied by the caller of setData()\n- fn is a function that accepts current 'data' as input and returns updated 'data'\n*/\nconst setData: : (fn: (data: VideoCallData) => VideoCallData) => void = (fn) => {\n  /*\n    - Here, we are passing the current value of 'data' to fn\n    - The return value of fn() i.e., the updated value of 'data' is assigned back to 'data'\n  */\ndata = fn(data);\n};\n"})}),"\n",(0,t.jsx)(i.h3,{id:"stream-object",children:"Stream Object"}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-typescript",children:"  // Initialising the video API\n  const aliceVideoCall = await userAlice.video.initialize(setData, {\n      stream: stream,\n      ...\n  });\n"})}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsxs)(i.li,{children:[(0,t.jsx)(i.code,{children:"stream"})," object is created using Push Stream API, which is basically to listen video call events and is used handle video call operations."]}),"\n",(0,t.jsxs)(i.li,{children:["Please refer to ",(0,t.jsx)(i.a,{href:"../stream-video",children:"Initializing Stream API"})," to learn how to get this stream object."]}),"\n"]}),"\n",(0,t.jsx)(i.h3,{id:"media-stream",children:"Media Stream"}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-typescript",children:"  // Initialising the video API\n  const aliceVideoCall = await userAlice.video.initialize(setData, {\n      ...\n      config: {\n        video: Boolean, // to enable video on start\n        audio: Boolean, // to enable audio on start\n      },\n      media?: MediaStream; // to initialize with existing media stream (for backend use)\n  });\n\n"})}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsxs)(i.li,{children:["initialise() function generates a new MediaStream object using ",(0,t.jsx)(i.code,{children:"navigator.mediaDevices.getUserMedia"})," from the available browser APIs."]}),"\n",(0,t.jsxs)(i.li,{children:["The ",(0,t.jsx)(i.code,{children:"video"})," and ",(0,t.jsx)(i.code,{children:"audio"})," boolean params are used to tell if you want to enable your audio/video during the video call or not."]}),"\n"]}),"\n",(0,t.jsx)(i.p,{children:"Example:"}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsxs)(i.li,{children:["\n",(0,t.jsxs)(i.p,{children:["If you pass the ",(0,t.jsx)(i.code,{children:"video"})," as ",(0,t.jsx)(i.code,{children:"false"}),", your video will be disabled during the entire call. If you pass it as ",(0,t.jsx)(i.code,{children:"true"}),", then your video will be turned on initially during the call, and later, you will have the option to toggle it on or off."]}),"\n"]}),"\n",(0,t.jsxs)(i.li,{children:["\n",(0,t.jsxs)(i.p,{children:["For ",(0,t.jsx)(i.code,{children:"audio"})," the above logic is the same."]}),"\n"]}),"\n",(0,t.jsxs)(i.li,{children:["\n",(0,t.jsx)(i.p,{children:"media is used to pass your existing media stream. This is for backend use."}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(i.admonition,{type:"info",children:(0,t.jsxs)(i.p,{children:["If ",(0,t.jsx)(i.code,{children:"media"})," object is passed as a param to ",(0,t.jsx)(i.code,{children:"initialise()"})," function then ",(0,t.jsx)(i.code,{children:"initialise"})," doesn't generate a new MediaStream rather, it would just assigns ",(0,t.jsx)(i.code,{children:"data.local.stream"})," to the passed ",(0,t.jsx)(i.code,{children:"media"})," object param. This is for backend use."]})}),"\n",(0,t.jsx)(i.admonition,{type:"info",children:(0,t.jsxs)(i.p,{children:["\u26a0 ",(0,t.jsx)(i.strong,{children:"Warning"}),": If ",(0,t.jsx)(i.code,{children:"audio"}),", ",(0,t.jsx)(i.code,{children:"video"})," aren't passed as true in ",(0,t.jsx)(i.code,{children:"initialise()"})," then they won't be available during the entire video call respectively."]})})]})}function u(e={}){const{wrapper:i}={...(0,a.a)(),...e.components};return i?(0,t.jsx)(i,{...e,children:(0,t.jsx)(c,{...e})}):c(e)}},685162:(e,i,n)=>{n.d(i,{Z:()=>l});n(667294);var t=n(236905);const a={tabItem:"tabItem_Ymn6"};var s=n(785893);function l(e){let{children:i,hidden:n,className:l}=e;return(0,s.jsx)("div",{role:"tabpanel",className:(0,t.Z)(a.tabItem,l),hidden:n,children:i})}},374866:(e,i,n)=>{n.d(i,{Z:()=>y});var t=n(667294),a=n(236905),s=n(212466),l=n(616550),o=n(120469),r=n(191980),d=n(867392),c=n(750012);function u(e){var i,n;return null!==(i=null===(n=t.Children.toArray(e).filter((e=>"\n"!==e)).map((e=>{if(!e||(0,t.isValidElement)(e)&&function(e){const{props:i}=e;return!!i&&"object"==typeof i&&"value"in i}(e))return e;throw new Error("Docusaurus error: Bad <Tabs> child <"+("string"==typeof e.type?e.type:e.type.name)+'>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.')})))||void 0===n?void 0:n.filter(Boolean))&&void 0!==i?i:[]}function h(e){const{values:i,children:n}=e;return(0,t.useMemo)((()=>{const e=null!=i?i:function(e){return u(e).map((e=>{let{props:{value:i,label:n,attributes:t,default:a}}=e;return{value:i,label:n,attributes:t,default:a}}))}(n);return function(e){const i=(0,d.l)(e,((e,i)=>e.value===i.value));if(i.length>0)throw new Error('Docusaurus error: Duplicate values "'+i.map((e=>e.value)).join(", ")+'" found in <Tabs>. Every value needs to be unique.')}(e),e}),[i,n])}function p(e){let{value:i,tabValues:n}=e;return n.some((e=>e.value===i))}function v(e){let{queryString:i=!1,groupId:n}=e;const a=(0,l.k6)(),s=function(e){let{queryString:i=!1,groupId:n}=e;if("string"==typeof i)return i;if(!1===i)return null;if(!0===i&&!n)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return null!=n?n:null}({queryString:i,groupId:n});return[(0,r._X)(s),(0,t.useCallback)((e=>{if(!s)return;const i=new URLSearchParams(a.location.search);i.set(s,e),a.replace({...a.location,search:i.toString()})}),[s,a])]}function m(e){const{defaultValue:i,queryString:n=!1,groupId:a}=e,s=h(e),[l,r]=(0,t.useState)((()=>function(e){var i;let{defaultValue:n,tabValues:t}=e;if(0===t.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(n){if(!p({value:n,tabValues:t}))throw new Error('Docusaurus error: The <Tabs> has a defaultValue "'+n+'" but none of its children has the corresponding value. Available values are: '+t.map((e=>e.value)).join(", ")+". If you intend to show no default tab, use defaultValue={null} instead.");return n}const a=null!==(i=t.find((e=>e.default)))&&void 0!==i?i:t[0];if(!a)throw new Error("Unexpected error: 0 tabValues");return a.value}({defaultValue:i,tabValues:s}))),[d,u]=v({queryString:n,groupId:a}),[m,j]=function(e){let{groupId:i}=e;const n=function(e){return e?"docusaurus.tab."+e:null}(i),[a,s]=(0,c.Nk)(n);return[a,(0,t.useCallback)((e=>{n&&s.set(e)}),[n,s])]}({groupId:a}),b=(()=>{const e=null!=d?d:m;return p({value:e,tabValues:s})?e:null})();(0,o.Z)((()=>{b&&r(b)}),[b]);return{selectedValue:l,selectValue:(0,t.useCallback)((e=>{if(!p({value:e,tabValues:s}))throw new Error("Can't select invalid tab value="+e);r(e),u(e),j(e)}),[u,j,s]),tabValues:s}}var j=n(972389);const b={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};var x=n(785893);function f(e){let{className:i,block:n,selectedValue:t,selectValue:l,tabValues:o}=e;const r=[],{blockElementScrollPositionUntilNextRender:d}=(0,s.o5)(),c=e=>{const i=e.currentTarget,n=r.indexOf(i),a=o[n].value;a!==t&&(d(i),l(a))},u=e=>{var i;let n=null;switch(e.key){case"Enter":c(e);break;case"ArrowRight":{var t;const i=r.indexOf(e.currentTarget)+1;n=null!==(t=r[i])&&void 0!==t?t:r[0];break}case"ArrowLeft":{var a;const i=r.indexOf(e.currentTarget)-1;n=null!==(a=r[i])&&void 0!==a?a:r[r.length-1];break}}null===(i=n)||void 0===i||i.focus()};return(0,x.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,a.Z)("tabs",{"tabs--block":n},i),children:o.map((e=>{let{value:i,label:n,attributes:s}=e;return(0,x.jsx)("li",{role:"tab",tabIndex:t===i?0:-1,"aria-selected":t===i,ref:e=>r.push(e),onKeyDown:u,onClick:c,...s,className:(0,a.Z)("tabs__item",b.tabItem,null==s?void 0:s.className,{"tabs__item--active":t===i}),children:null!=n?n:i},i)}))})}function g(e){let{lazy:i,children:n,selectedValue:a}=e;const s=(Array.isArray(n)?n:[n]).filter(Boolean);if(i){const e=s.find((e=>e.props.value===a));return e?(0,t.cloneElement)(e,{className:"margin-top--md"}):null}return(0,x.jsx)("div",{className:"margin-top--md",children:s.map(((e,i)=>(0,t.cloneElement)(e,{key:i,hidden:e.props.value!==a})))})}function I(e){const i=m(e);return(0,x.jsxs)("div",{className:(0,a.Z)("tabs-container",b.tabList),children:[(0,x.jsx)(f,{...e,...i}),(0,x.jsx)(g,{...e,...i})]})}function y(e){const i=(0,j.Z)();return(0,x.jsx)(I,{...e,children:u(e.children)},String(i))}},511151:(e,i,n)=>{n.d(i,{Z:()=>o,a:()=>l});var t=n(667294);const a={},s=t.createContext(a);function l(e){const i=t.useContext(s);return t.useMemo((function(){return"function"==typeof e?e(i):{...i,...e}}),[i,e])}function o(e){let i;return i=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:l(e.components),t.createElement(s.Provider,{value:i},e.children)}}}]);